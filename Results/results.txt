Tyler Kim, Tim Kang
Project 2 Results Discussion

Experiment 1: In Experiment 1 we see that there is an inverse relationship between the number of misses and the size of the page cache.  So, in general, a larger cache will mean fewer misses; however, this relationship is relatively weak.  The improvements we see from changing from a 1KB to 16KB table are not close to being a factor of 16.  Likewise, changing from 16KB to 128KB does not cause improvements by a factor of 8.  Overall, it is easy to conclude that having a bigger page table is best whenever possible, but you must consider whether you are willing to pay for having a larger space requirement.  Having a larger table allows for more memory locations to be held, which of course will decrease number of misses.  Another visible trend is that increasing block size will cause improvements, but only up to a certain point.  If the block size becomes too large relative to the cache size, performance actually decreases.  This is most visible using sample_large.tr with a cache size of 1KB.  We assume that this problem occurs because when block size is very large you have fewer sets to assign to.  If the number of sets becomes too small, you are constantly needing to evict cache locations on misses.

Experiment 2: Our results show that, in general, LRU is a better algorithm than FIFO for cache location eviction.  All samples indicate that LRU has a lower miss rate.  We believe that LRU is probably the better algorithm because some memory locations are used quite frequently; just because a memory location is originally referenced earlier doesn't mean it will not show up again in the near future.  So instead, it is better to base evictions off of the time of last use instead of time of original use.

Experiment 3: This experiment shows that higher associativity leads to better performance; however, similar to Experiment 1, these performance gains are not proportional to the change in associativity.  In changing from an associativity of 1 to 4, all three traces saw good improvement, but in changing from 4 to 8 the improvements were much smaller.  Increasing associativity causes improvements because it gives a width to our table, meaning that multiple locations with the same index; without this width, locations with the same index would constantly be overwriting each other.  Overall we believe that increasing associativity further won't cause more misses, but will have declining improvements with added time and hardware complexity in finding which location to evict.